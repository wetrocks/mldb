{
	"info": {
		"_postman_id": "9171eee3-6d9e-43d6-8afc-770f5fd7deba",
		"name": "MLDB API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Litter Types",
			"item": [
				{
					"name": "Get Litter Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var litterTypeSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\"",
									"    }",
									"};",
									"",
									"pm.test(`${pm.info.requestName} - Schema is valid`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, litterTypeSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/LitterType",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"LitterType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Litter Types w/ no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 401`, function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/LitterType",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"LitterType"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sites",
			"item": [
				{
					"name": "Post Site w/ no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 401`, function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 201`, function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    var createdSite = pm.response.json();",
									"    pm.collectionVariables.set(\"createdSite\", createdSite);",
									"    pm.collectionVariables.set(\"createdSiteId\", createdSite.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/site",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sites w/ no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 401`, function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(`${pm.info.requestName} - Contains created site`, function () {",
									"    const createdSiteId =  pm.collectionVariables.get(\"createdSiteId\");",
									"    ",
									"    shouldBeCreated = pm.response.json().filter( x => x.id === createdSiteId );",
									"",
									"    pm.expect(shouldBeCreated).length(1);",
									"});",
									"",
									"",
									"var siteSchema = {",
									"    \"tite\": \"Sites\",",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [ \"id\", \"name\" ],",
									"        \"properties\": {",
									"            \"id\": { \"type\" : \"string\" },",
									"            \"name\" : { \"type\" : \"string\" }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(`${pm.info.requestName} - Schema is valid`, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, siteSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Site (not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 404`, function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site/{{$randomUUID}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Site (exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(`${pm.info.requestName} - Site is returned`, function () {",
									"    const createdSite = pm.variables.get(\"createdSite\");",
									"    const responseSite = pm.response.json();",
									"",
									"    pm.expect(responseSite).to.deep.include(createdSite);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site/{{createdSiteId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site",
								"{{createdSiteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Site w/ no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 401`, function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_BASE_URL}}/site/{{createdSiteId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site",
								"{{createdSiteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Site (not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 404`, function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{randomGuid}}\",\n    \"name\": \"Independence\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/site/{{randomGuid}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site",
								"{{randomGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Site (exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.info.requestName} - Status code is 204`, function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{createdSiteId}}\",\n    \"name\": \"{{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_BASE_URL}}/site/{{createdSiteId}}",
							"host": [
								"{{API_BASE_URL}}"
							],
							"path": [
								"site",
								"{{createdSiteId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// set collection level variable to random value.  Can't reuse a random value otherwise",
					"pm.collectionVariables.set(\"randomGuid\", pm.variables.replaceIn('{{$randomUUID}}'));",
					"",
					"// Get JWT to use for requests",
					"const tokenUrl = pm.environment.get('TOKEN_URL');",
					"console.log(tokenUrl);",
					"const grantType = 'client_credentials';",
					"const scope = 'apitest';",
					"const client_id = 'foo';",
					"const client_secret = 'bar';",
					"",
					"const accessTokenVar = 'accessToken';",
					"const accessTokenExpirationVar = 'accessTokenExpiry';",
					"",
					"// setup POST request for new token",
					"const echoPostRequest = {",
					"  url: tokenUrl,",
					"  method: 'POST',",
					"  header: 'Content-Type:application/x-www-form-urlencoded',",
					"  body: `grant_type=${grantType}&scope=${scope}&client_id=${client_id}&client_secret=${client_secret}`",
					"};",
					"",
					"const accessToken = pm.collectionVariables.get(accessTokenVar);",
					"const tokenExpiration = pm.collectionVariables.get(accessTokenExpirationVar);",
					"",
					"if (accessToken && tokenExpiration && (tokenExpiration >= Date.now())) {",
					"   console.log('Using existing token');",
					"} else {",
					"    // get new token and set vars",
					"    pm.sendRequest(echoPostRequest, function (err, res) {",
					"        console.log(\"Requesting new token\");",
					"        console.log(err ? err : res.json());",
					"        if (err === null) {",
					"            var responseJson = res.json();",
					"            pm.collectionVariables.set(accessTokenVar, responseJson.access_token);",
					"",
					"            var expiryDate = new Date();",
					"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"            pm.collectionVariables.set(accessTokenExpirationVar, expiryDate.getTime());",
					"        }",
					"    });",
					"}",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "siteName",
			"value": "",
			"type": "default"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "accessTokenExpiry",
			"value": ""
		},
		{
			"key": "createdSite",
			"value": "",
			"type": "default"
		},
		{
			"key": "createdSiteId",
			"value": "",
			"type": "default"
		},
		{
			"key": "randomGuid",
			"value": "",
			"type": "default"
		}
	]
}